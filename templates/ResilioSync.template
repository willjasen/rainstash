{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Sets up a Resilio Sync instance",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "The EC2 instance type",
      "Type" : "String",
      "Default" : "t2.nano",
      "AllowedValues" : [ "t2.nano","t2.micro","t2.small","t2.medium","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.medium","m3.large","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "Must be a valid EC2 instance type."
    },

    "KeyName": {
      "Description" : "The name of an existing EC2 keypair for this instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "ResilioSync",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },

    "AllowedSubnet" : {
      "Type" : "String",
      "Description" : "The subnet that is allowed to access the web server interface, usually your own public IP",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "StorageNeededInGB" : {
      "Type" : "String",
      "Description" : "Amount of storage needed for Resilio Sync",
      "Default": "1"
    },

    "FolderKey" : {
      "Type" : "String",
      "NoEcho": "true",
      "Description" : "Obtain an encrypted folder key from an already existing Sync folder",
      "MinLength": "33",
      "MaxLength": "33",
      "AllowedPattern": "^F[A-Z,0-9]{32}$",
      "ConstraintDescription": "All Resilio Sync encrypted folder keys are 33 characters long, beginning with F"
    },

    "WebInterfaceUsername" : {
      "Type" : "String",
      "Description" : "Mininum of 8 characters"
    },

    "WebInterfacePassword" : {
      "Type" : "String",
      "NoEcho": "true",
      "Description" : "Password for the web interface",
      "MinLength": "8",
      "ConstraintDescription": "Mininum of 8 characters"
    },

    "DeviceName" : {
      "Type" : "String",
      "Description" : "Device name, shown with peers connected"
    },

    "VolumeType" : {
      "Type" : "String",
      "Default" : "standard",
      "AllowedValues" : ["gp2","io1","sc1","st1","standard"],
      "Description" : "Enter in gp2, io1, sc1, st1, or standard. Default is standard magnetic hard drive (for cost)."
    }

  },

  "Mappings": {
    "RegionMap": {
      "us-east-1": { "AMI" : "ami-0b33d91d" },
      "us-east-2": { "AMI" : "ami-c55673a0"},
      "us-west-1": { "AMI" : "ami-165a0876" },
      "us-west-2": { "AMI" : "ami-f173cc91" },
      "eu-west-1": { "AMI" : "ami-70edb016" },
      "eu-west-2": { "AMI" : "ami-f1949e95" }
    }
  },

  "Resources" : {

    "ResilioSyncVPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "CidrBlock" : "192.168.10.0/24",
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "ResilioSyncVPC" }
        ]
      }
    },

    "PrivateSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "ResilioSyncVPC" },
        "CidrBlock" : "192.168.10.0/24",
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "192.168.10.0/24" }
        ]
      }
    },

    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "ResilioSyncVPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "192.168.10.0/24" }
        ]
      }
    },

    "PrivateSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway"
    },

    "AttachInternetGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "ResilioSyncVPC" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PrivateRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PrivateNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "ResilioSyncVPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "InboundPrivateNetworkAclEntryForTCP" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "OutBoundPrivateNetworkAclEntryForTCP" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "InboundPrivateNetworkAclEntryForUDP" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "17",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "40003", "To" : "40003" }
      }
    },

    "OutBoundPrivateNetworkAclEntryForUDP" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "17",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "PrivateSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
      }
    },

    "InstanceSecurityGroup" : {
   	  "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow inbound ports needed for Resilio Sync",
        "VpcId" : {"Ref" : "ResilioSyncVPC"},
        "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : { "Ref" : "AllowedSubnet" }
         },
         {
            "IpProtocol" : "tcp",
            "FromPort" : "8888",
            "ToPort" : "8888",
            "CidrIp" : { "Ref" : "AllowedSubnet" }
         },
         {
            "IpProtocol" : "tcp",
            "FromPort" : "40003",
            "ToPort" : "40003",
            "CidrIp" : "0.0.0.0/0"
         },
         {
            "IpProtocol" : "udp",
            "FromPort" : "40003",
            "ToPort" : "40003",
            "CidrIp" : "0.0.0.0/0"
         }
         ],
        "SecurityGroupEgress" : [{
         "IpProtocol" : "-1",
         "FromPort" : "-1",
         "ToPort" : "-1",
         "CidrIp" : "0.0.0.0/0"
        }]
      }
    },

    "PublicIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "InstanceId" : { "Ref" : "ResilioSyncInstance" },
        "Domain" : "vpc"
      }
    },

    "DataVolume" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : { "Ref" : "StorageNeededInGB" },
     	  "VolumeType" : { "Ref": "VolumeType" },
        "AvailabilityZone" : { "Fn::GetAtt" : [ "PrivateSubnet", "AvailabilityZone" ] }
      }
    },

    "ResilioSyncInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Comment" : "Resilio Sync",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "users" : {
              "rslsync" : {
                "uid" : "1024",
                "homeDir" : "/tmp"
              }
            },
            "files" : {

              "/opt/rslsync.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "{\n",
                    "  \"device_name\" : \"", { "Ref": "DeviceName" }, "\",\n",
                    "  \"storage_path\": \"/secure/.sync\",\n",
                    "  \"listening_port\": 40003,\n\n",
                    "  \"directory_root\" : \"/secure\",\n",
                    "  \"shared_folders\" : [ {\n",
                    "  \"secret\" : \"#rslsync-secret\",\n",
                    "  \"dir\" : \"/secure/rainstash\",\n",
                    "  \"use_relay_server\" : true,\n",
                    "  \"use_tracker\" : true,\n",
                    "  \"use_dht\" : false,\n",
                    "  \"search_lan\" : true,\n",
                    "  \"use_sync_trash\" : true,\n",
                    "  \"overwrite_changes\" : false\n",
                    "  } ]\n\n",

                    "/* Advanced preferences can be added to config file. Info is available at https://help.getsync.com/hc/en-us/articles/206178884-Running-Sync-in-configuration-mode */\n",
                  "}\n"
                ]]},
                "mode"    : "000700",
                "owner"   : "rslsync",
                "group"   : "rslsync"
              },

              "/opt/rslsync.conf.web" : {
                "content" : { "Fn::Join" : ["", [
                  "{\n",
                    "  \"device_name\" : \"", { "Ref": "DeviceName" }, "\",\n",
                    "  \"storage_path\": \"/secure/.sync\",\n",
                    "  \"listening_port\": 40003,\n\n",
                    "  \"directory_root\" : \"/secure\",\n",

                    "  \"webui\": {\n",
                    "    \"listen\" : \"0.0.0.0:8888\",\n",
                    "    \"force_https\" : true,\n",
                    "    \"login\" : \"", { "Ref": "WebInterfaceUsername" }, "\",\n",
                    "    \"password\" : \"", { "Ref": "WebInterfacePassword" }, "\",\n",
                    "    \"ssl_certificate\" : \"/secure/rslsync.crt\",\n",
                    "    \"ssl_private_key\" : \"/secure/rslsync.key.plaintext\"\n",
                    "  }\n",
                    "/* Advanced preferences can be added to config file. Info is available at https://help.getsync.com/hc/en-us/articles/206178884-Running-Sync-in-configuration-mode */\n",
                  "}\n"
                ]]},
                "mode"    : "000700",
                "owner"   : "rslsync",
                "group"   : "rslsync"
              },

              "/etc/init.d/rslsync" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/sh\n",
                  "# chkconfig: 12345 97 97\n",
                  "# description: Resilio Sync\n\n",
                  "case \"$1\" in\n",
                  "start)\n",
                  "  /sbin/runuser rslsync  -s /bin/bash -c \"/secure/rslsync --config /secure/rslsync.conf\"\n",
                  ";;\n",
                  "stop)\n",
                  "  kill `pidof rslsync`\n",
                  ";;\n",
                  "restart)\n",
                  "  service rslsync stop\n",
                  "  sleep 5\n",
                  "  service rslsync start\n",
                  ";;\n",
                  "*)\n",
                  "  exit 1\n",
                  "esac\n",
                  "exit 0"
                ]]},
                "mode"    : "000700",
                "owner"   : "rslsync",
                "group"   : "rslsync"
              },

              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.ResilioSyncInstance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r ResilioSyncInstance ",
                    " --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "commands" : {
              "01-encrypt-and-open-volume" : {
                "command" : { "Fn::Join" : ["", [
                  "encryptionPassword=$(openssl rand -base64 64);",
                  "echo $encryptionPassword | cryptsetup luksFormat /dev/xvdf;",
                  "echo $encryptionPassword | cryptsetup luksOpen /dev/xvdf storedev"
                ]]}
              },
              "02-download-resilio-sync" : {
                "command" : "curl https://download-cdn.resilio.com/stable/linux-x64/resilio-sync_x64.tar.gz > rslsync.tar.gz",
                "cwd" : "/opt"
              },
              "03-format-volume" : {
                "command" : "mkfs.ext4 -m 0 /dev/mapper/storedev"
              },
              "04-create-mount-point" : {
                "command" : "mkdir /secure"
              },
              "05-mount-encrypted-volume-and-assign-owner" : {
                "command" : "mount /dev/mapper/storedev /secure; chown rslsync /secure"
              },
              "06-move-app-and-config" : {
                "command" : "mv rslsync* /secure",
                "cwd": "/opt"
              },
              "07-unzip-rslsync" : {
                "command" : "gzip -d rslsync.tar.gz",
                "cwd" : "/secure"
              },
              "08-extract-rslsync" : {
                "command" : "tar -xvf /secure/rslsync.tar -C /secure",
                "cwd" : "/secure"
              },
              "09-generate-random-file" : {
                "command" : "openssl rand -out .rnd 8192",
                "cwd" : "/secure"
              },
              "10-set-randfile-in-env" : {
                "command" : "export RANDFILE=/secure/.rnd"
              },
              "11-create-ssl-password" : {
                "command" : "openssl rand -base64 32 > ssl_password",
                "cwd" : "/secure"
              },
              "12-create-private-key" : {
                "command" : "openssl genrsa -aes256 -passout pass:$(cat ssl_password) -out rslsync.key 4096",
                "cwd" : "/secure"
              },
              "13-create-csr" : {
                "command" : "openssl req -passin pass:$(cat ssl_password) -new -subj \"/C=US/ST=US/L=Nowhere/O=Nowhere/CN=rainstash\" -key rslsync.key -out rslsync.csr",
                "cwd" : "/secure"
              },
              "14-extract-plaintext-key" : {
                "command" : "openssl rsa -passin pass:$(cat ssl_password) -in rslsync.key -out rslsync.key.plaintext",
                "cwd" : "/secure"
              },
              "15-create-self-signed-certificate" : {
                "command" : "openssl x509 -req -days 365 -in rslsync.csr -signkey rslsync.key.plaintext -out rslsync.crt",
                "cwd" : "/secure"
              },
              "16-create-sync-directory" : {
                "command" : "mkdir .sync; chown -R rslsync .sync",
                "cwd" : "/secure"
              },
              "17-get-rslsync-secret" : {
                "command" : { "Fn::Join" : ["", [
                  "sed -i.bak s/#rslsync-secret/",
                  { "Ref": "FolderKey" },
                  "/g rslsync.conf"
                ]]},
                "cwd" : "/secure"
              },
              "18-start-rslsync" : {
                "command" : "service rslsync start"
              },
              "19-enable-web" : {
                "command" : "cp rslsync.conf.web rslsync.conf",
                "cwd" : "/secure"
              },
              "20-restart-rslsync" : {
                "command" : "service rslsync restart"
              },
              "21-update-the-system" : {
                "command" : "yum -y update"
              }
            },
            "services" : {
              "sysvinit" : {
                "rslsync" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : ["/secure/rslsync.conf"]
                }
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ],
        "PrivateIpAddress": "192.168.10.10",
        "SecurityGroupIds": [ { "Ref": "InstanceSecurityGroup" } ],
        "Volumes" : [ {
          "VolumeId" : { "Ref" : "DataVolume" },
          "Device" : "/dev/xvdf"
        } ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "yum update -y aws-cfn-bootstrap\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "ResilioSyncWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Install the simple web page\n",
          "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackId" }, " -r ResilioSyncInstance ",
          "         --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "# Start up the cfn-hup daemon to listen for changes to the ResilioSync instance metadata\n",
          "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",

          "# All done so signal success\n",
          "/opt/aws/bin/cfn-signal -e 0 -r \"ResilioSync instance setup complete\" '", { "Ref" : "ResilioSyncWaitHandle" }, "'\n"
        ]]}}
      }
    },

    "ResilioSyncWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "ResilioSyncWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "ResilioSyncInstance",
      "Properties" : {
        "Handle" : {"Ref" : "ResilioSyncWaitHandle"},
        "Timeout" : "3600"
      }
    }
  },

  "Outputs" : {
    "Link" : {
      "Description" : "HTTPS link to access the instance",
      "Value" : { "Fn::Join" : ["", [
        "https://", { "Ref": "PublicIP" }, ":8888, only available from ", { "Ref": "AllowedSubnet" }
      ]]}

    }
  }
}
